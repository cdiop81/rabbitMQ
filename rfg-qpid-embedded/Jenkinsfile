try {

    stage("üõ¨ Checkout") {
        node('linux') {
            checkout scm
        }
    }

    stage("üë∑ Build") {
        node('linux') {
            withEnv(["JAVA_HOME=${tool 'jdk1.8'}", "PATH+MAVEN=${tool 'maven'}/bin:${env.JAVA_HOME}/bin"]) {
                sh "mvn clean compile -DskipTests"
            }
        }
    }

    stage("‚òî Unit Tests") {
        node('linux') {
            withEnv(["JAVA_HOME=${tool 'jdk1.8'}", "PATH+MAVEN=${tool 'maven'}/bin:${env.JAVA_HOME}/bin"]) {
                sh "mvn clean test"
                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/TEST-*.xml,**/target/test-reports/*.xml'
            }
        }
    }

    stage("üîç Sonar") {
        node('linux') {
            withEnv(["JAVA_HOME=${tool 'jdk1.8'}", "PATH+MAVEN=${tool 'maven'}/bin:${env.JAVA_HOME}/bin"]) {
                withSonarQubeEnv {
                    sh "mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install -Dmaven.test.failure.ignore=true sonar:sonar"
                }
            }
        }
    }

    stage("üõ´ Deploy") {
        node('linux') {
            withEnv(["JAVA_HOME=${tool 'jdk1.8'}", "PATH+MAVEN=${tool 'maven'}/bin:${env.JAVA_HOME}/bin"]) {
                sh "mvn clean deploy -DskipTests"

            }
        }
    }

} catch (e) {
    sendMail("FAILED")
    throw e
}

sendMail("SUCCESS")

def sendMail(status) {
    mail(to: 'list.par-bsc-dat-com.socgen.safir-care@socgen.com',
            subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
            body: """${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
                   Check console output at ${env.BUILD_URL}"""
    )
}
